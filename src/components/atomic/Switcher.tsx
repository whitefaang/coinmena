/**
 * Switcher components
 * 1. Has tabs to switch
 * 2. Dynamic Detail component to be generated by the user of this component
 */
import classNames from 'classnames'
import React, { ReactElement, useContext, useEffect, useState } from 'react'

// switcher props
type SwitcherProps = {
  /**
   * Nested child elements
   */
  children: ReactElement[]
  /**
   * method triggered when there's a change in the selected tabs
   */
  onChange?: (value: any, id: string) => void
}

/**
 * SwitchItem Props
 */
interface SwitcherItemProps {
  /**
   * Nested chil elements
   */
  children: ReactElement | string
  /**
   * Value of the item
   */
  value: any
  /**
   * ID of the tab
   */
  id: string
  /**
   * Flag to set of the option is default
   */
  default?: boolean
}

/**
 * SwitcherDetail Props
 */
interface SwitcherDetailProps {
  /**
   * Nested children
   */
  children: (value: any) => ReactElement
}

/**
 * Context used between Switcher, SwitcherItem and SwitcherDetails component
 */
const ctx = React.createContext<{
  /**
   * Selected option in switcher
   */
  selected: any
  /**
   * onChange method for the seleted value
   */
  onChange: (value: any, id: string) => void
} | null>(null)

function Switcher(props: SwitcherProps) {
  const [value, setValue] = useState<any>()
  const onChange = (newVal: any, id: string) => {
    setValue(id)
    if (props.onChange) {
      props.onChange(newVal, id)
    }
  }
  return (
    <ctx.Provider value={{ selected: value, onChange }}>
      <div className="rounded-md bg-surface shadow-sm">{props.children}</div>
    </ctx.Provider>
  )
}

Switcher.Tabs = ({ children }: { children: ReactElement[] }) => {
  return <div className="flex items-center justify-evenly">{children}</div>
}

Switcher.Item = ({
  children,
  value,
  id,
  default: defaultVal,
}: SwitcherItemProps) => {
  const { onChange, selected } = useContext(ctx)!

  useEffect(() => {
    if (!selected && defaultVal) {
      onChange(value, id)
    }
  }, [])

  return (
    <div
      onClick={() => onChange(value, id)}
      className={classNames(
        {
          'text-primary border-b-primary': id === selected,
        },
        'p-4 flex-1 text-center cursor-pointer hover:text-primary font-bold text-lg',
        'border-b-2 border-r-2 border-gray-200 last:border-r-0'
      )}
    >
      {children}
    </div>
  )
}

Switcher.Detail = ({ children }: SwitcherDetailProps) => {
  const render = (selected: any) => children(selected)
  const { selected } = useContext(ctx)!
  return <div className="p-3">{render(selected)}</div>
}

export default Switcher
